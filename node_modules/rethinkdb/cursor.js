// Generated by CoffeeScript 1.7.0
var ArrayResult, AtomFeed, Cursor, EventEmitter, Feed, IterableResult, Promise, ar, aropt, err, mkErr, protoResponseType, setImmediate, util, varar,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

err = require('./errors');

util = require('./util');

protoResponseType = require('./proto-def').Response.ResponseType;

Promise = require('bluebird');

EventEmitter = require('events').EventEmitter;

ar = util.ar;

varar = util.varar;

aropt = util.aropt;

mkErr = util.mkErr;

if (typeof setImmediate === "undefined" || setImmediate === null) {
  setImmediate = function(cb) {
    return setTimeout(cb, 0);
  };
}

IterableResult = (function() {
  IterableResult.prototype.stackSize = 100;

  function IterableResult(conn, token, opts, root) {
    this._eachCb = __bind(this._eachCb, this);
    this._conn = conn;
    this._token = token;
    this._opts = opts;
    this._root = root;
    this._responses = [];
    this._responseIndex = 0;
    this._outstandingRequests = 1;
    this._iterations = 0;
    this._endFlag = false;
    this._contFlag = false;
    this._closeAsap = false;
    this._cont = null;
    this._cbQueue = [];
    this.next = this._next;
    this.each = this._each;
  }

  IterableResult.prototype._addResponse = function(response) {
    if (response.t === this._type || response.t === protoResponseType.SUCCESS_SEQUENCE) {
      if (response.r.length > 0) {
        this._responses.push(response);
      }
    } else {
      this._responses.push(response);
    }
    this._outstandingRequests -= 1;
    if (response.t !== this._type) {
      this._endFlag = true;
      if (this._closeCb != null) {
        switch (response.t) {
          case protoResponseType.COMPILE_ERROR:
            this._closeCb(mkErr(err.RqlRuntimeError, response, this._root));
            break;
          case protoResponseType.CLIENT_ERROR:
            this._closeCb(mkErr(err.RqlRuntimeError, response, this._root));
            break;
          case protoResponseType.RUNTIME_ERROR:
            this._closeCb(mkErr(err.RqlRuntimeError, response, this._root));
            break;
          default:
            this._closeCb();
        }
      }
    }
    this._contFlag = false;
    if (this._closeAsap === false) {
      this._promptNext();
    } else {
      this.close(this._closeCb);
    }
    return this;
  };

  IterableResult.prototype._getCallback = function() {
    var cb, immediateCb;
    this._iterations += 1;
    cb = this._cbQueue.shift();
    if (this._iterations % this.stackSize === this.stackSize - 1) {
      immediateCb = (function(err, row) {
        return setImmediate(function() {
          return cb(err, row);
        });
      });
      return immediateCb;
    } else {
      return cb;
    }
  };

  IterableResult.prototype._handleRow = function() {
    var cb, response, row;
    response = this._responses[0];
    row = util.recursivelyConvertPseudotype(response.r[this._responseIndex], this._opts);
    cb = this._getCallback();
    this._responseIndex += 1;
    if (this._responseIndex === response.r.length) {
      this._responses.shift();
      this._responseIndex = 0;
    }
    return cb(null, row);
  };

  IterableResult.prototype.bufferEmpty = function() {
    return this._responses.length === 0 || this._responses[0].r.length <= this._responseIndex;
  };

  IterableResult.prototype._promptNext = function() {
    var cb, response;
    while (this._cbQueue[0] != null) {
      if (this.bufferEmpty() === true) {
        if (this._endFlag === true) {
          cb = this._getCallback();
          cb(new err.RqlDriverError("No more rows in the cursor."));
        } else if (this._responses.length <= 1) {
          this._promptCont();
        }
        return;
      } else {
        response = this._responses[0];
        if (this._responses.length === 1) {
          this._promptCont();
        }
        switch (response.t) {
          case protoResponseType.SUCCESS_PARTIAL:
            this._handleRow();
            break;
          case protoResponseType.SUCCESS_FEED:
            this._handleRow();
            break;
          case protoResponseType.SUCCESS_ATOM_FEED:
            this._handleRow();
            break;
          case protoResponseType.SUCCESS_SEQUENCE:
            if (response.r.length === 0) {
              this._responses.shift();
            } else {
              this._handleRow();
            }
            break;
          case protoResponseType.COMPILE_ERROR:
            this._responses.shift();
            cb = this._getCallback();
            cb(mkErr(err.RqlCompileError, response, this._root));
            break;
          case protoResponseType.CLIENT_ERROR:
            this._responses.shift();
            cb = this._getCallback();
            cb(mkErr(err.RqlClientError, response, this._root));
            break;
          case protoResponseType.RUNTIME_ERROR:
            this._responses.shift();
            cb = this._getCallback();
            cb(mkErr(err.RqlRuntimeError, response, this._root));
            break;
          default:
            this._responses.shift();
            cb = this._getCallback();
            cb(new err.RqlDriverError("Unknown response type for cursor"));
        }
      }
    }
  };

  IterableResult.prototype._promptCont = function() {
    if ((!this._contFlag) && (!this._endFlag) && this._conn.isOpen()) {
      this._contFlag = true;
      this._outstandingRequests += 1;
      return this._conn._continueQuery(this._token);
    }
  };

  IterableResult.prototype.hasNext = function() {
    throw new err.RqlDriverError("The `hasNext` command has been removed since 1.13. Use `next` instead.");
  };

  IterableResult.prototype._next = varar(0, 1, function(cb) {
    var fn, p;
    fn = (function(_this) {
      return function(cb) {
        _this._cbQueue.push(cb);
        return _this._promptNext();
      };
    })(this);
    if (typeof cb === "function") {
      return fn(cb);
    } else if (cb === void 0) {
      p = new Promise(function(resolve, reject) {
        cb = function(err, result) {
          if (err) {
            return reject(err);
          } else {
            return resolve(result);
          }
        };
        return fn(cb);
      });
      return p;
    } else {
      throw new err.RqlDriverError("First argument to `next` must be a function or undefined.");
    }
  });

  IterableResult.prototype.close = varar(0, 1, function(cb) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        if (_this._endFlag === true) {
          return resolve();
        } else {
          _this._closeCb = function(err) {
            if (err) {
              return reject(err);
            } else {
              return resolve();
            }
          };
          if (_this._outstandingRequests > 0) {
            return _this._closeAsap = true;
          } else {
            _this._outstandingRequests += 1;
            return _this._conn._endQuery(_this._token);
          }
        }
      };
    })(this)).nodeify(cb);
  });

  IterableResult.prototype._each = varar(1, 2, function(cb, onFinished) {
    var nextCb, self, stopFlag;
    if (typeof cb !== 'function') {
      throw new err.RqlDriverError("First argument to each must be a function.");
    }
    if ((onFinished != null) && typeof onFinished !== 'function') {
      throw new err.RqlDriverError("Optional second argument to each must be a function.");
    }
    stopFlag = false;
    self = this;
    nextCb = (function(_this) {
      return function(err, data) {
        if (stopFlag !== true) {
          if (err != null) {
            if (err.message === 'No more rows in the cursor.') {
              if (onFinished != null) {
                return onFinished();
              }
            } else {
              return cb(err);
            }
          } else {
            stopFlag = cb(null, data) === false;
            return _this._next(nextCb);
          }
        } else if (onFinished != null) {
          return onFinished();
        }
      };
    })(this);
    return this._next(nextCb);
  });

  IterableResult.prototype.toArray = varar(0, 1, function(cb) {
    var fn;
    fn = (function(_this) {
      return function(cb) {
        var arr, eachCb, onFinish;
        arr = [];
        eachCb = function(err, row) {
          if (err != null) {
            return cb(err);
          } else {
            return arr.push(row);
          }
        };
        onFinish = function(err, ar) {
          return cb(null, arr);
        };
        return _this.each(eachCb, onFinish);
      };
    })(this);
    if ((cb != null) && typeof cb !== 'function') {
      throw new err.RqlDriverError("First argument to `toArray` must be a function or undefined.");
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var toArrayCb;
        toArrayCb = function(err, result) {
          if (err != null) {
            return reject(err);
          } else {
            return resolve(result);
          }
        };
        return fn(toArrayCb);
      };
    })(this)).nodeify(cb);
  });

  IterableResult.prototype._makeEmitter = function() {
    this.emitter = new EventEmitter;
    this.each = function() {
      throw new err.RqlDriverError("You cannot use the cursor interface and the EventEmitter interface at the same time.");
    };
    return this.next = function() {
      throw new err.RqlDriverError("You cannot use the cursor interface and the EventEmitter interface at the same time.");
    };
  };

  IterableResult.prototype.addListener = function() {
    var args, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.emitter == null) {
      this._makeEmitter();
      setImmediate((function(_this) {
        return function() {
          return _this._each(_this._eachCb);
        };
      })(this));
    }
    return (_ref = this.emitter).addListener.apply(_ref, args);
  };

  IterableResult.prototype.on = function() {
    var args, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (this.emitter == null) {
      this._makeEmitter();
      setImmediate((function(_this) {
        return function() {
          return _this._each(_this._eachCb);
        };
      })(this));
    }
    return (_ref = this.emitter).on.apply(_ref, args);
  };

  IterableResult.prototype.once = function() {
    var _ref;
    if (this.emitter == null) {
      this._makeEmitter();
      setImmediate((function(_this) {
        return function() {
          return _this._each(_this._eachCb);
        };
      })(this));
    }
    return (_ref = this.emitter).once.apply(_ref, args);
  };

  IterableResult.prototype.removeListener = function() {
    var _ref;
    if (this.emitter == null) {
      this._makeEmitter();
      setImmediate((function(_this) {
        return function() {
          return _this._each(_this._eachCb);
        };
      })(this));
    }
    return (_ref = this.emitter).removeListener.apply(_ref, args);
  };

  IterableResult.prototype.removeAllListeners = function() {
    var _ref;
    if (this.emitter == null) {
      this._makeEmitter();
      setImmediate((function(_this) {
        return function() {
          return _this._each(_this._eachCb);
        };
      })(this));
    }
    return (_ref = this.emitter).removeAllListeners.apply(_ref, args);
  };

  IterableResult.prototype.setMaxListeners = function() {
    var _ref;
    if (this.emitter == null) {
      this._makeEmitter();
      setImmediate((function(_this) {
        return function() {
          return _this._each(_this._eachCb);
        };
      })(this));
    }
    return (_ref = this.emitter).setMaxListeners.apply(_ref, args);
  };

  IterableResult.prototype.listeners = function() {
    var _ref;
    if (this.emitter == null) {
      this._makeEmitter();
      setImmediate((function(_this) {
        return function() {
          return _this._each(_this._eachCb);
        };
      })(this));
    }
    return (_ref = this.emitter).listeners.apply(_ref, args);
  };

  IterableResult.prototype.emit = function() {
    var _ref;
    if (this.emitter == null) {
      this._makeEmitter();
      setImmediate((function(_this) {
        return function() {
          return _this._each(_this._eachCb);
        };
      })(this));
    }
    return (_ref = this.emitter).emit.apply(_ref, args);
  };

  IterableResult.prototype._eachCb = function(err, data) {
    if (err != null) {
      return this.emitter.emit('error', err);
    } else {
      return this.emitter.emit('data', data);
    }
  };

  return IterableResult;

})();

Cursor = (function(_super) {
  __extends(Cursor, _super);

  function Cursor() {
    this._type = protoResponseType.SUCCESS_PARTIAL;
    Cursor.__super__.constructor.apply(this, arguments);
  }

  Cursor.prototype.toString = ar(function() {
    return "[object Cursor]";
  });

  return Cursor;

})(IterableResult);

Feed = (function(_super) {
  __extends(Feed, _super);

  function Feed() {
    this._type = protoResponseType.SUCCESS_FEED;
    Feed.__super__.constructor.apply(this, arguments);
  }

  Feed.prototype.hasNext = function() {
    throw new err.RqlDriverError("`hasNext` is not available for feeds.");
  };

  Feed.prototype.toArray = function() {
    throw new err.RqlDriverError("`toArray` is not available for feeds.");
  };

  Feed.prototype.toString = ar(function() {
    return "[object Feed]";
  });

  return Feed;

})(IterableResult);

AtomFeed = (function(_super) {
  __extends(AtomFeed, _super);

  function AtomFeed() {
    this._type = protoResponseType.SUCCESS_ATOM_FEED;
    AtomFeed.__super__.constructor.apply(this, arguments);
  }

  AtomFeed.prototype.hasNext = function() {
    throw new err.RqlDriverError("`hasNext` is not available for feeds.");
  };

  AtomFeed.prototype.toArray = function() {
    throw new err.RqlDriverError("`toArray` is not available for feeds.");
  };

  AtomFeed.prototype.toString = ar(function() {
    return "[object AtomFeed]";
  });

  return AtomFeed;

})(IterableResult);

ArrayResult = (function(_super) {
  __extends(ArrayResult, _super);

  function ArrayResult() {
    return ArrayResult.__super__.constructor.apply(this, arguments);
  }

  ArrayResult.prototype._hasNext = ar(function() {
    if (this.__index == null) {
      this.__index = 0;
    }
    return this.__index < this.length;
  });

  ArrayResult.prototype._next = varar(0, 1, function(cb) {
    var fn;
    fn = (function(_this) {
      return function(cb) {
        var self;
        if (_this._hasNext() === true) {
          self = _this;
          if (self.__index % _this.stackSize === _this.stackSize - 1) {
            return setImmediate(function() {
              return cb(null, self[self.__index++]);
            });
          } else {
            return cb(null, self[self.__index++]);
          }
        } else {
          return cb(new err.RqlDriverError("No more rows in the cursor."));
        }
      };
    })(this);
    return new Promise(function(resolve, reject) {
      var nextCb;
      nextCb = function(err, result) {
        if (err) {
          return reject(err);
        } else {
          return resolve(result);
        }
      };
      return fn(nextCb);
    }).nodeify(cb);
  });

  ArrayResult.prototype.toArray = varar(0, 1, function(cb) {
    var fn;
    fn = (function(_this) {
      return function(cb) {
        if (_this.__index != null) {
          return cb(null, _this.slice(_this.__index, _this.length));
        } else {
          return cb(null, _this);
        }
      };
    })(this);
    return new Promise(function(resolve, reject) {
      var toArrayCb;
      toArrayCb = function(err, result) {
        if (err) {
          return reject(err);
        } else {
          return resolve(result);
        }
      };
      return fn(toArrayCb);
    }).nodeify(cb);
  });

  ArrayResult.prototype.close = function() {
    return this;
  };

  ArrayResult.prototype.makeIterable = function(response) {
    var method, name, _ref;
    response.__proto__ = {};
    _ref = ArrayResult.prototype;
    for (name in _ref) {
      method = _ref[name];
      if (name !== 'constructor') {
        if (name === '_each') {
          response.__proto__['each'] = method;
          response.__proto__['_each'] = method;
        } else if (name === '_next') {
          response.__proto__['next'] = method;
          response.__proto__['_next'] = method;
        } else {
          response.__proto__[name] = method;
        }
      }
    }
    response.__proto__.__proto__ = [].__proto__;
    return response;
  };

  return ArrayResult;

})(IterableResult);

module.exports.Cursor = Cursor;

module.exports.AtomFeed = AtomFeed;

module.exports.Feed = Feed;

module.exports.makeIterable = ArrayResult.prototype.makeIterable;
